"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1934],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),k=c(n),d=o,m=k["".concat(p,".").concat(d)]||k[d]||u[d]||a;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=k;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3384:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={layout:"default",title:"PTO",parent:"Docs",nav_order:7},p=void 0,c={unversionedId:"Docs/pto",id:"Docs/pto",title:"PTO",description:"Assumed Constructor",source:"@site/docs/Docs/pto.md",sourceDirName:"Docs",slug:"/Docs/pto",permalink:"/my-website/docs/Docs/pto",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Docs/pto.md",tags:[],version:"current",frontMatter:{layout:"default",title:"PTO",parent:"Docs",nav_order:7},sidebar:"tutorialSidebar",previous:{title:"PID",permalink:"/my-website/docs/Docs/pid"},next:{title:"Set Drive and Telemetry",permalink:"/my-website/docs/Docs/set_and_get_drive"}},l={},u=[{value:"Assumed Constructor",id:"assumed-constructor",level:2},{value:"pto_check()",id:"pto_check",level:2},{value:"pto_add()",id:"pto_add",level:2},{value:"pto_remove()",id:"pto_remove",level:2},{value:"pto_toggle()",id:"pto_toggle",level:2}],k={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"assumed-constructor"},"Assumed Constructor"),(0,a.kt)("p",null,"All code below assumes this constructor is used.  As long as the name of the constructor is ",(0,a.kt)("inlineCode",{parentName:"p"},"chassis"),", any of the constructors can be used. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  //    (or tracking wheel diameter)\n  ,4.125\n\n  // Cartridge RPM\n  //   (or tick per rotation if using tracking wheels)\n  ,600\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  //    (or gear ratio of tracking wheel)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,2.333\n\n  // Uncomment if using tracking wheels\n  /*\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{-3, -4}\n  */\n\n  // Uncomment if tracking wheels are plugged into a 3 wire expander\n  // 3 Wire Port Expander Smart Port\n  // ,9\n);\n\n')),(0,a.kt)("h2",{id:"pto_check"},"pto_check()"),(0,a.kt)("p",null,"Checks if the port is in the pto_list.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool pto_check(pros::Motor check_if_pto);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\n\nvoid initialize() {\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n  chassis.pto_add({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 1 1\n}\n')),(0,a.kt)("h2",{id:"pto_add"},"pto_add()"),(0,a.kt)("p",null,"Adds motors to the pto_list.  You cannot add the first index because it's used for autonomous.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void pto_add(std::vector<pros::Motor> pto_list);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\n\nvoid initialize() {\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n  chassis.pto_add({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 1 1\n}\n')),(0,a.kt)("h2",{id:"pto_remove"},"pto_remove()"),(0,a.kt)("p",null,"Removes motors from the pto_list.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void pto_remove(std::vector<pros::Motor> pto_list);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\n\nvoid initialize() {\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n  chassis.pto_add({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 1 1\n  chassis.pto_remove({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n}\n')),(0,a.kt)("h2",{id:"pto_toggle"},"pto_toggle()"),(0,a.kt)("p",null,"Runs ",(0,a.kt)("inlineCode",{parentName:"p"},"pto_add")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"toggle")," is true, and ",(0,a.kt)("inlineCode",{parentName:"p"},"pto_remove")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"toggle")," is false.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void pto_toggle(std::vector<pros::Motor> pto_list, bool toggle);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\npros::ADIDigitalOut pto_intake_piston('A');\nbool pto_intake_enabled = false;\n\nvoid pto_intake(bool toggle) {\n  pto_intake_enabled = toggle;\n  chassis.pto_toggle({intake_l, intake_r}, toggle);\n  pto_intake_piston.set_value(toggle);\n  if (toggle) {\n    intake_l.set_brake_mode(pros::E_MOTOR_BRAKE_COAST);\n    intake_r.set_brake_mode(pros::E_MOTOR_BRAKE_COAST);\n  }\n}\n")))}d.isMDXComponent=!0}}]);