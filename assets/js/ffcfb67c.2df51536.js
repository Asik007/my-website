"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[175],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),k=a,_=d["".concat(p,".").concat(k)]||d[k]||u[k]||l;return n?r.createElement(_,o(o({ref:t},c),{},{components:n})):r.createElement(_,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3555:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={layout:"default",title:"User Control",parent:"Docs",nav_order:2},p="**User Control**",s={unversionedId:"Docs/user_control",id:"Docs/user_control",title:"User Control",description:"{: .no_toc }",source:"@site/docs/Docs/user_control.md",sourceDirName:"Docs",slug:"/Docs/user_control",permalink:"/my-website/docs/Docs/user_control",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Docs/user_control.md",tags:[],version:"current",frontMatter:{layout:"default",title:"User Control",parent:"Docs",nav_order:2},sidebar:"tutorialSidebar",previous:{title:"Set Drive and Telemetry",permalink:"/my-website/docs/Docs/set_and_get_drive"},next:{title:"Util",permalink:"/my-website/docs/Docs/util"}},c={},u=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Assumed Constructor",id:"assumed-constructor",level:2},{value:"tank()",id:"tank",level:2},{value:"arcade_standard()",id:"arcade_standard",level:2},{value:"arcade_flipped()",id:"arcade_flipped",level:2},{value:"initialize()",id:"initialize",level:2},{value:"init_curve_sd()",id:"init_curve_sd",level:2},{value:"set_curve_defaults()",id:"set_curve_defaults",level:2},{value:"set_active_brake()",id:"set_active_brake",level:2},{value:"toggle_modify_curve_with_controller()",id:"toggle_modify_curve_with_controller",level:2},{value:"set_left_curve_buttons()",id:"set_left_curve_buttons",level:2},{value:"set_right_curve_buttons()",id:"set_right_curve_buttons",level:2},{value:"left_curve_function()",id:"left_curve_function",level:2},{value:"right_curve_function()",id:"right_curve_function",level:2},{value:"set_joystick_threshold()",id:"set_joystick_threshold",level:2},{value:"joy_thresh_opcontrol()",id:"joy_thresh_opcontrol",level:2},{value:"modify_curve_with_controller()",id:"modify_curve_with_controller",level:2}],d={toc:u};function k(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"user-control"},(0,l.kt)("strong",{parentName:"h1"},"User Control")),(0,l.kt)("p",null,"{: .no_toc }"),(0,l.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,l.kt)("p",null,"{: .no_toc .text-delta }"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"TOC\n{:toc}")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"assumed-constructor"},"Assumed Constructor"),(0,l.kt)("p",null,"All code below assumes this constructor is used.  As long as the name of the constructor is ",(0,l.kt)("inlineCode",{parentName:"p"},"chassis"),", any of the constructors can be used. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  //    (or tracking wheel diameter)\n  ,4.125\n\n  // Cartridge RPM\n  //   (or tick per rotation if using tracking wheels)\n  ,600\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  //    (or gear ratio of tracking wheel)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,2.333\n\n  // Uncomment if using tracking wheels\n  /*\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{3, 4}\n  */\n\n  // Uncomment if tracking wheels are plugged into a 3 wire expander\n  // 3 Wire Port Expander Smart Port\n  // ,9\n);\n\n')),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"tank"},"tank()"),(0,l.kt)("p",null,"Sets the drive to the left and right y axis.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void tank();\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.tank();\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"arcade_standard"},"arcade_standard()"),(0,l.kt)("p",null,"Sets the drive to standard arcade.  Left stick is fwd/rev.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"stick_type")," is either ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SPLIT")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SINGLE"),".\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void arcade_standard(e_type stick_type);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.arcade_standard(EZ::SPIT); // For split arcade\n    // chassis.arcade_standard(EZ::SINGLE); // For single arcade\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"arcade_flipped"},"arcade_flipped()"),(0,l.kt)("p",null,"Sets the drive to flipped arcade.  Right stick is fwd/rev.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"stick_type")," is either ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SPLIT")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SINGLE"),".",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void arcade_flipped(e_type stick_type);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.arcade_flipped(EZ::SPIT); // For split arcade\n    // chassis.arcade_flipped(EZ::SINGLE); // For single arcade\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"initialize"},"initialize()"),(0,l.kt)("p",null,"Runs ",(0,l.kt)("inlineCode",{parentName:"p"},"init_curve_sd()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"imu_calibrate()"),".",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void Drive::initialize();\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.initialize();\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"init_curve_sd"},"init_curve_sd()"),(0,l.kt)("p",null,"Sets the left/right curve constants to what's on the sd card.  If the sd card is empty, creates needed files.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void init_curve_sd();\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.init_curve_sd();\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"set_curve_defaults"},"set_curve_defaults()"),(0,l.kt)("p",null,"Sets the left/right curve defaults and saves new values to the sd card.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"left")," left input curve.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"right")," right input curve.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_curve_default(double left, double right);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_curve_defaults(2, 2);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"set_active_brake"},"set_active_brake()"),(0,l.kt)("p",null,"Active brake runs a P loop on the drive when joysticks are within their threshold.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"kp")," proportional constant for drive.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_active_brake(double kp);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_active_brake(0.1);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"toggle_modify_curve_with_controller"},"toggle_modify_curve_with_controller()"),(0,l.kt)("p",null,"Enables/disables buttons used for modifying the controller curve with the joystick.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"toggle")," true enables, false disables.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void toggle_modify_curve_with_controller(bool toggle);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.toggle_modify_curve_with_controller(true);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"set_left_curve_buttons"},"set_left_curve_buttons()"),(0,l.kt)("p",null,"Sets the buttons that are used to modify the left input curve.  The example is the default.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"decrease")," a pros button.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"increase")," a pros button.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_left_curve_buttons(pros::controller_digital_e_t decrease, pros::controller_digital_e_t increase);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_left_curve_buttons (pros::E_CONTROLLER_DIGITAL_LEFT, pros::E_CONTROLLER_DIGITAL_RIGHT);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"set_right_curve_buttons"},"set_right_curve_buttons()"),(0,l.kt)("p",null,"Sets the buttons that are used to modify the right input curve.  The example is the default.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"decrease")," a pros button.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"increase")," a pros button.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_right_curve_buttons(pros::controller_digital_e_t decrease, pros::controller_digital_e_t increase);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_right_curve_buttons(pros::E_CONTROLLER_DIGITAL_Y,    pros::E_CONTROLLER_DIGITAL_A);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"left_curve_function"},"left_curve_function()"),(0,l.kt)("p",null,"Returns the input times the red curve ",(0,l.kt)("a",{parentName:"p",href:"https://www.desmos.com/calculator/rcfjjg83zx"},"here"),".  ",(0,l.kt)("inlineCode",{parentName:"p"},"tank()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_standard()"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_flipped()")," all handle this for you.  When tank is enabled, only this curve is used.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"x")," input value.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double left_curve_function(double x);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    int l_stick = left_curve_function(master.get_analog(ANALOG_LEFT_Y));\n    int r_stick = left_curve_function(master.get_analog(ANALOG_RIGHT_Y));\n    \n    chassis.set_tank(l_stick, r_stick);\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"right_curve_function"},"right_curve_function()"),(0,l.kt)("p",null,"Returns the input times the red curve ",(0,l.kt)("a",{parentName:"p",href:"https://www.desmos.com/calculator/rcfjjg83zx"},"here"),".  ",(0,l.kt)("inlineCode",{parentName:"p"},"tank()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_standard()"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_flipped()")," all handle this for you.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"x")," input value.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double right_curve_function(double x);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    int l_stick = left_curve_function(master.get_analog(ANALOG_LEFT_Y));\n    int r_stick = left_curve_function(master.get_analog(ANALOG_RIGHT_Y));\n    \n    chassis.set_tank(l_stick, r_stick);\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"set_joystick_threshold"},"set_joystick_threshold()"),(0,l.kt)("p",null,"Threshold the joystick will return 0 within.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"threshold")," an integer, recommended to be less then 5.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_joystick_threshold(int threshold);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_joystick_threshold(5);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"joy_thresh_opcontrol"},"joy_thresh_opcontrol()"),(0,l.kt)("p",null,"Runs the joystick control.  Sets the left drive to ",(0,l.kt)("inlineCode",{parentName:"p"},"l_stick"),", and right drive to ",(0,l.kt)("inlineCode",{parentName:"p"},"r_stick"),".  Runs active brake and joystick thresholds.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void joy_thresh_opcontrol(int l_stick, int r_stick);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.joy_thresh_opcontroL(master.get_analog(ANALOG_LEFT_Y), master.get_analog(ANALOG_RIGHT_Y));\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n  chassis.set_joystick_threshold(5);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"modify_curve_with_controller"},"modify_curve_with_controller()"),(0,l.kt)("p",null,"Allows the user to modify the curve with the controller.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void modify_curve_with_controller();\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.joy_thresh_opcontroL(master.get_analog(ANALOG_LEFT_Y), master.get_analog(ANALOG_RIGHT_Y));\n\n    chassis.modify_curve_with_controller();\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n  chassis.set_joystick_threshold(5);\n}\n")),(0,l.kt)("hr",null))}k.isMDXComponent=!0}}]);