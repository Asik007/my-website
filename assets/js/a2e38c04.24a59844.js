"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8390],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,k=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return n?r.createElement(k,p(p({ref:t},c),{},{components:n})):r.createElement(k,p({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,p=new Array(l);p[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,p[1]=o;for(var s=2;s<l;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4273:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),p=["components"],o={layout:"default",title:"Util",parent:"Docs",nav_order:8},i="**Util**",s={unversionedId:"Docs/util",id:"Docs/util",title:"Util",description:"controller",source:"@site/docs/Docs/util.md",sourceDirName:"Docs",slug:"/Docs/util",permalink:"/my-website/docs/Docs/util",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Docs/util.md",tags:[],version:"current",frontMatter:{layout:"default",title:"Util",parent:"Docs",nav_order:8},sidebar:"tutorialSidebar",previous:{title:"User Control",permalink:"/my-website/docs/Docs/user_control"},next:{title:"API",permalink:"/my-website/docs/category/api"}},c={},u=[{value:"controller",id:"controller",level:2},{value:"print_to_screen()",id:"print_to_screen",level:2},{value:"print_ez_template()",id:"print_ez_template",level:2},{value:"sgn()",id:"sgn",level:2},{value:"clip_num()",id:"clip_num",level:2},{value:"DELAY_TIME",id:"delay_time",level:2},{value:"IS_SD_CARD",id:"is_sd_card",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,p);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"util"},(0,l.kt)("strong",{parentName:"h1"},"Util")),(0,l.kt)("h2",{id:"controller"},"controller"),(0,l.kt)("p",null,"The pros controller is defined globally in our library as ",(0,l.kt)("inlineCode",{parentName:"p"},"master"),".",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"extern pros::Controller master();\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    int l_stick = left_curve_function(master.get_analog(ANALOG_LEFT_Y));\n    int r_stick = left_curve_function(master.get_analog(ANALOG_RIGHT_Y));\n    \n    chassis.set_tank(l_stick, r_stick);\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n")),(0,l.kt)("h2",{id:"print_to_screen"},"print_to_screen()"),(0,l.kt)("p",null,"Prints to the LLEMU.  This function handles text that's too long for a line by finding the last word and starting it on a new line, and takes ",(0,l.kt)("inlineCode",{parentName:"p"},"\\n")," to set a new line.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"text")," input string.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"line")," starting line.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void print_to_screen(, std::string text, int line)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 1"),(0,l.kt)("br",{parentName:"p"}),"\n","Returns:",(0,l.kt)("br",{parentName:"p"}),"\n","hello, this is line 0",(0,l.kt)("br",{parentName:"p"}),"\n","this is line 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void initialize() {\n  ez::print_to_screen("hello, this is line 0\\nthis is line 1");\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 2"),(0,l.kt)("br",{parentName:"p"}),"\n","Returns:",(0,l.kt)("br",{parentName:"p"}),"\n","01234567890123456789012345678901",(0,l.kt)("br",{parentName:"p"}),"\n","hello"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void initialize() {\n  std::string 32char = 01234567890123456789012345678901;\n  ez::print_to_screen(32char + "hello");\n}\n')),(0,l.kt)("h2",{id:"print_ez_template"},"print_ez_template()"),(0,l.kt)("p",null,"Prints our branding on your terimnal :D.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void print_ez_template();\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  print_ez_template();\n}\n")),(0,l.kt)("h2",{id:"sgn"},"sgn()"),(0,l.kt)("p",null,"Returns the sgn of the input.  Returns 1 if positive, -1 if negative, and 0 if 0.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double sgn(double input);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void opcontrol() {\n  while (true) {\n    printf("Sgn of Controller: %i \\n", sgn(master.get_analog(ANALOG_LEFT_Y)));\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n')),(0,l.kt)("h2",{id:"clip_num"},"clip_num()"),(0,l.kt)("p",null,"Checks if ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," is within range of ",(0,l.kt)("inlineCode",{parentName:"p"},"max")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"min"),".  If it's out, this returns ",(0,l.kt)("inlineCode",{parentName:"p"},"max")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"min")," respectively.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double clip_num(double input, double max, double min);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void opcontrol() {\n  while (true) {\n    int joy = master.get_analog(ANALOG_LEFT_Y);\n\n    // When the joystick is between 100 and 127\n    // (or -100 and -127) this will print 100 (or -100).\n    printf("Clipped Controller: %i \\n", clip_num(joy, 100, -100)); \n  }\n}\n')),(0,l.kt)("h2",{id:"delay_time"},"DELAY_TIME"),(0,l.kt)("p",null,"Standard delay time for loops.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"const int DELAY_TIME = 10;\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.tank();\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n")),(0,l.kt)("h2",{id:"is_sd_card"},"IS_SD_CARD"),(0,l.kt)("p",null,"Boolean that checks if an sd card is installed.  True if there is one, false if there isn't.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Prototype")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"const bool IS_SD_CARD = pros::usd::is_installed();\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void initialize() {\n  if (!ez::util::IS_SD_CARD) \n    printf("No SD Card Found!\\n");\n}\n')))}d.isMDXComponent=!0}}]);