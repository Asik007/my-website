"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1604],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5558:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={layout:"default",title:"Drive Constructors",parent:"Docs",nav_order:1},l="**Drive Constructors**",c={unversionedId:"Docs/constructor",id:"Docs/constructor",title:"Drive Constructors",description:"{: .no_toc }",source:"@site/docs/Docs/constructor.md",sourceDirName:"Docs",slug:"/Docs/constructor",permalink:"/my-website/docs/Docs/constructor",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Docs/constructor.md",tags:[],version:"current",frontMatter:{layout:"default",title:"Drive Constructors",parent:"Docs",nav_order:1},sidebar:"tutorialSidebar",previous:{title:"Autonomous Selector",permalink:"/my-website/docs/Docs/auton_selector"},next:{title:"PID",permalink:"/my-website/docs/Docs/pid"}},p={},u=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Integrated Encoders",id:"integrated-encoders",level:2},{value:"ADI Encoders in Brain",id:"adi-encoders-in-brain",level:2},{value:"ADI Encoders in Expander",id:"adi-encoders-in-expander",level:2},{value:"Rotation Sensor",id:"rotation-sensor",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"drive-constructors"},(0,a.kt)("strong",{parentName:"h1"},"Drive Constructors")),(0,a.kt)("p",null,"{: .no_toc }"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("p",null,"{: .no_toc .text-delta }"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"TOC\n{:toc}")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: smart encoders are not supported as of 2.0.0")),(0,a.kt)("h2",{id:"integrated-encoders"},"Integrated Encoders"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ticks, double ratio);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'Drive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  ,4.125\n\n  // Cartridge RPM\n  ,600\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,2.333\n);\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"adi-encoders-in-brain"},"ADI Encoders in Brain"),(0,a.kt)("p",null,"Currently only supports parallel trackers!",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ticks, double ratio, std::vector<int> left_tracker_ports,\nstd::vector<int> right_tracker_ports);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Tracking Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  ,4.125\n\n  // Ticks per Rotation of Encoder\n  ,360\n\n  // External Gear Ratio of Tracking Wheel (MUST BE DECIMAL)\n  // eg. if your drive is 84:36 where the 36t is sensored, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is sensored, your RATIO would be 0.6.\n  ,1\n\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{-3, -4}\n);\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"adi-encoders-in-expander"},"ADI Encoders in Expander"),(0,a.kt)("p",null,"Currently only supports parallel trackers!",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ticks, double ratio, std::vector<int> left_tracker_ports, \nstd::vector<int> right_tracker_ports, int expander_smart_port);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Tracking Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  ,4.125\n\n  // Ticks per Rotation of Encoder\n  ,360\n\n  // External Gear Ratio of Tracking Wheel(MUST BE DECIMAL)\n  // eg. if your drive is 84:36 where the 36t is sensored, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is sensored, your RATIO would be 0.6.\n  ,1\n\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{-3, -4}\n  \n  // 3 Wire Port Expander Smart Port\n  ,9\n);\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"rotation-sensor"},"Rotation Sensor"),(0,a.kt)("p",null,"Currently only supports parallel trackers!",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Prototype")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ratio, int left_rotation_port, int right_rotation_port);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  //    (or tracking wheel diameter)\n  ,4.125\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  //    (or gear ratio of tracking wheel)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,1\n\n  // Left Rotation Port (negative port will reverse it!)\n  ,8\n\n  // Right Rotation Port (negative port will reverse it!)\n  ,-9\n);\n')))}m.isMDXComponent=!0}}]);